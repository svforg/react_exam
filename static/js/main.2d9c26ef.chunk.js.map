{"version":3,"sources":["components/CustomInput/CustomInput.module.css","components/CustomButton/CustomButton.module.css","components/Output/Output.module.css","components/CustomButton/CustomButton.tsx","components/CustomInput/CustomInput.tsx","components/Settings/Settings.tsx","components/Output/Output.tsx","components/Display/Display.tsx","App.tsx","functions/localStorage/localStorage.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","CustomButton","restProps","className","css","button","CustomInput","labelTitle","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","label","e","currentTarget","value","key","Settings","saveSettings","maxValueHandler","maxValue","startValueHandler","startValue","disabled","onClick","Output","props","finalClassName","red","incrementValue","Display","setIncrementDefault","setIncrementValueUp","parseInt","App","stateLocalStorage","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoresState","useState","setError","setStartValue","setMaxValue","setIncrementValue","state","stringify","setItem","savesState","valueUp","isNaN","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d9c26ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputLable\":\"CustomInput_inputLable__2kEn9\",\"input\":\"CustomInput_input__3nuTm\",\"label\":\"CustomInput_label__1uFxx\",\"labelTitle\":\"CustomInput_labelTitle__2v0uz\",\"superInput\":\"CustomInput_superInput__2N008\",\"errorInput\":\"CustomInput_errorInput__2sTDq\",\"error\":\"CustomInput_error__3oTH0\",\"button\":\"CustomInput_button__3ch0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__2t4Xf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Output_red__1cMDR\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport css from \"./CustomButton.module.css\";\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\nconst CustomButton: React.FC<DefaultButtonPropsType> = (\n    {\n        ...restProps\n    }\n) => {\n\n  return (\n    <button className={css.button}\n      {...restProps}\n    />\n  );\n};\n\nexport default CustomButton;\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps, ChangeEvent, KeyboardEvent, InputHTMLAttributes} from 'react';\nimport css from \"./CustomInput.module.css\";\n\n\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: (value: string) => void\n    error?: string | null\n    spanClassName?: string\n    labelTitle?: string\n};\n\nconst CustomInput: React.FC<SuperInputTextPropsType> = (\n    {\n        labelTitle,\n        type,\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps\n    }\n) => {\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(e.currentTarget.value); // то вызвать его\n    }\n    const finalSpanClassName = `${css.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = error ? `${css.errorInput} ${css.superInput}` : css.superInput;\n\n    return (\n        <label className={css.label}>\n            <span className={css.labelTitle}>\n                {labelTitle}\n            </span>\n            <input\n                type={type}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <label className={finalSpanClassName}>{error}</label>}\n        </label>\n    );\n};\n\nexport default CustomInput;\n","import React from 'react';\nimport CustomButton from \"./../CustomButton/CustomButton\";\nimport CustomInput from \"./../CustomInput/CustomInput\";\n\ntype SettingsPropsType = {\n    saveSettings: (startValue: string, maxValue: string) => void\n    maxValueHandler: (value: string) => void\n    maxValue: string\n    startValueHandler: (value: string) => void\n    startValue: string\n    error: boolean\n}\n\nexport const Settings: React.FC<SettingsPropsType> = (\n    {\n        saveSettings,\n        maxValueHandler,\n        maxValue,\n        startValueHandler,\n        startValue,\n        error\n    }\n) => {\n\n    return (\n        <>\n            <div className=\"App-inner App-settings\">\n                <CustomInput\n                    onChangeText={maxValueHandler}\n                    labelTitle=\"max value\"\n                    type=\"number\"\n                    value={maxValue}/>\n\n                <CustomInput\n                    onChangeText={startValueHandler}\n                    labelTitle=\"start value\"\n                    type=\"number\"\n                    value={startValue}/>\n            </div>\n\n            <div className=\"App-input\">\n                <CustomButton\n                    disabled={error}\n                    onClick={() => saveSettings(startValue, maxValue)}>\n                    set\n                </CustomButton>\n            </div>\n        </>\n    );\n};","import React from 'react';\nimport css from \"./Output.module.css\";\n\ntype OutputPropsType = {\n    error?: boolean\n    incrementValue: string\n}\n\nfunction Output(props: OutputPropsType) {\n\n    const finalClassName = (props.error) ? css.red : \"\";\n\n    return (\n        <div className={finalClassName}>\n            {props.incrementValue}\n        </div>\n    );\n}\n\nexport default Output;\n","import React from 'react';\nimport Output from \"./../Output/Output\";\nimport CustomButton from \"./../CustomButton/CustomButton\";\n\ntype DisplayPropsType = {\n    setIncrementDefault: () => void\n    setIncrementValueUp: () => void\n    incrementValue: string\n    error: boolean\n}\n\nexport const Display: React.FC<DisplayPropsType> = (\n    {\n        setIncrementDefault,\n        setIncrementValueUp,\n        incrementValue,\n        error,\n    }\n) => {\n\n    return (\n        <>\n            <div className=\"App-inner App-output\">\n                <Output\n                    error={error}\n                    incrementValue={incrementValue}/>\n            </div>\n\n            <div className=\"App-input\">\n                <CustomButton\n                    onClick={setIncrementValueUp}\n                    disabled={error}>\n                    inc\n                </CustomButton>\n\n                <CustomButton onClick={setIncrementDefault} disabled={parseInt(incrementValue) === 0}>\n                    reset\n                </CustomButton>\n            </div>\n        </>\n    );\n};\n\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Settings} from './components/Settings/Settings';\nimport {Display} from './components/Display/Display';\nimport {restoresState, savesState} from \"./functions/localStorage/localStorage\";\n\ntype AppPropsType = {}\ntype StateLocalStorageType = {\n    startValue: string\n    maxValue: string\n}\n\nfunction App(props: AppPropsType) {\n\n    const stateLocalStorage = restoresState<StateLocalStorageType>(\"counter-settings\", {startValue: \"0\", maxValue: \"5\"});\n\n    let [error, setError] = useState<boolean>(false);\n\n    let [startValue, setStartValue] = useState<string>(stateLocalStorage.startValue);\n    const startValueHandler = (value: string) => {\n        setStartValue(value);\n\n        if ((parseInt(value) < 0) || (parseInt(value) === parseInt(maxValue))) {\n            setIncrementValue(\"Incorrect value!\");\n            setError(true);\n        }\n        else {\n            setIncrementValue(\"enter values and press 'set'\");\n            setError(false);\n        }\n    };\n\n    let [maxValue, setMaxValue] = useState<string>(stateLocalStorage.maxValue);\n    const maxValueHandler = (value: string) => {\n        setMaxValue(value);\n\n        if (parseInt(value) === parseInt(startValue)) {\n            setIncrementValue(\"Incorrect value!\");\n            setError(true);\n        }\n        else {\n            setIncrementValue(\"enter values and press 'set'\");\n            setError(false);\n        }\n    };\n\n    const saveSettings = (startValue: string, maxValue: string) => savesState<StateLocalStorageType>(\"counter-settings\", {startValue: startValue, maxValue: maxValue});\n\n    let [incrementValue, setIncrementValue] = useState<string>(startValue);\n    const setIncrementValueUp = () => {\n        let valueUp;\n\n        if (parseInt(incrementValue) + 1 === parseInt(maxValue)) {\n            setError(true);\n        }\n\n        if (isNaN(parseInt(incrementValue))) {\n            valueUp = startValue;\n        }\n        else {\n            valueUp = parseInt(incrementValue);\n            ++valueUp;\n        }\n\n        setIncrementValue(valueUp.toString())\n    };\n    const setIncrementDefault = () => {\n        setError(false);\n        setIncrementValue(startValue);\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-wrapper\">\n                <Settings\n                    saveSettings={saveSettings}\n                    maxValueHandler={maxValueHandler}\n                    maxValue={maxValue}\n                    startValueHandler={startValueHandler}\n                    startValue={startValue}\n                    error={error}/>\n            </div>\n\n            <div className=\"App-wrapper\">\n                <Display\n                    setIncrementDefault={setIncrementDefault}\n                    setIncrementValueUp={setIncrementValueUp}\n                    incrementValue={incrementValue}\n                    error={error}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","export function savesState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoresState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n//\r\n// // получем в переменную state объект из ячейки \"test\" или дэфолтный объект если ячейка пуста\r\n// const state: StateType = restoreState<StateType>(\"test\", {x: \"\", y: 0});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}